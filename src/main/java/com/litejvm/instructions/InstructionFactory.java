package com.litejvm.instructions;

import com.litejvm.instructions.base.Instruction;
import com.litejvm.instructions.comparisons.dcmp.DCMPG;
import com.litejvm.instructions.comparisons.dcmp.DCMPL;
import com.litejvm.instructions.comparisons.fcmp.FCMPG;
import com.litejvm.instructions.comparisons.fcmp.FCMPL;
import com.litejvm.instructions.comparisons.ifacmp.IF_ACMPEQ;
import com.litejvm.instructions.comparisons.ifacmp.IF_ACMPNE;
import com.litejvm.instructions.comparisons.ifcond.*;
import com.litejvm.instructions.comparisons.ificmp.*;
import com.litejvm.instructions.comparisons.lcmp.LCMP;
import com.litejvm.instructions.constants.NOP;
import com.litejvm.instructions.constants.constop.*;
import com.litejvm.instructions.constants.ipush.BIPUSH;
import com.litejvm.instructions.constants.ipush.SIPUSH;
import com.litejvm.instructions.control.GOTO;
import com.litejvm.instructions.control.LOOKUP_SWITCH;
import com.litejvm.instructions.control.TABLE_SWITCH;
import com.litejvm.instructions.conversions.d2x.D2F;
import com.litejvm.instructions.conversions.d2x.D2I;
import com.litejvm.instructions.conversions.d2x.D2L;
import com.litejvm.instructions.conversions.f2x.F2D;
import com.litejvm.instructions.conversions.f2x.F2I;
import com.litejvm.instructions.conversions.f2x.F2L;
import com.litejvm.instructions.conversions.i2x.*;
import com.litejvm.instructions.conversions.l2x.L2D;
import com.litejvm.instructions.conversions.l2x.L2F;
import com.litejvm.instructions.conversions.l2x.L2I;
import com.litejvm.instructions.extended.GOTO_W;
import com.litejvm.instructions.extended.IFNONNULL;
import com.litejvm.instructions.extended.IFNULL;
import com.litejvm.instructions.extended.WIDE;
import com.litejvm.instructions.loads.aload.*;
import com.litejvm.instructions.loads.dload.*;
import com.litejvm.instructions.loads.fload.*;
import com.litejvm.instructions.loads.iload.*;
import com.litejvm.instructions.loads.lload.*;
import com.litejvm.instructions.math.IINC;
import com.litejvm.instructions.math.arithmetic.add.DADD;
import com.litejvm.instructions.math.arithmetic.add.FADD;
import com.litejvm.instructions.math.arithmetic.add.IADD;
import com.litejvm.instructions.math.arithmetic.add.LADD;
import com.litejvm.instructions.math.arithmetic.div.DDIV;
import com.litejvm.instructions.math.arithmetic.div.FDIV;
import com.litejvm.instructions.math.arithmetic.div.IDIV;
import com.litejvm.instructions.math.arithmetic.div.LDIV;
import com.litejvm.instructions.math.arithmetic.mul.DMUL;
import com.litejvm.instructions.math.arithmetic.mul.FMUL;
import com.litejvm.instructions.math.arithmetic.mul.IMUL;
import com.litejvm.instructions.math.arithmetic.mul.LMUL;
import com.litejvm.instructions.math.arithmetic.neg.DNEG;
import com.litejvm.instructions.math.arithmetic.neg.FNEG;
import com.litejvm.instructions.math.arithmetic.neg.INEG;
import com.litejvm.instructions.math.arithmetic.neg.LNEG;
import com.litejvm.instructions.math.arithmetic.rem.DREM;
import com.litejvm.instructions.math.arithmetic.rem.FREM;
import com.litejvm.instructions.math.arithmetic.rem.IREM;
import com.litejvm.instructions.math.arithmetic.rem.LREM;
import com.litejvm.instructions.math.arithmetic.sub.DSUB;
import com.litejvm.instructions.math.arithmetic.sub.FSUB;
import com.litejvm.instructions.math.arithmetic.sub.ISUB;
import com.litejvm.instructions.math.arithmetic.sub.LSUB;
import com.litejvm.instructions.math.bool.*;
import com.litejvm.instructions.math.shift.*;
import com.litejvm.instructions.stack.dup.*;
import com.litejvm.instructions.stack.pop.POP;
import com.litejvm.instructions.stack.pop.POP2;
import com.litejvm.instructions.stack.swap.SWAP;
import com.litejvm.instructions.stores.astore.*;
import com.litejvm.instructions.stores.dstore.*;
import com.litejvm.instructions.stores.fstore.*;
import com.litejvm.instructions.stores.istore.*;
import com.litejvm.instructions.stores.lstore.*;

public class InstructionFactory {
    static Instruction nop = new NOP();
    static Instruction aconst_null = new ACONST_NULL();
    static Instruction iconst_m1 = new ICONST_M1();
    static Instruction iconst_0 = new ICONST_0();
    static Instruction iconst_1 = new ICONST_1();
    static Instruction iconst_2 = new ICONST_2();
    static Instruction iconst_3 = new ICONST_3();
    static Instruction iconst_4 = new ICONST_4();
    static Instruction iconst_5 = new ICONST_5();
    static Instruction lconst_0 = new LCONST_0();
    static Instruction lconst_1 = new LCONST_1();
    static Instruction fconst_0 = new FCONST_0();
    static Instruction fconst_1 = new FCONST_1();
    static Instruction fconst_2 = new FCONST_2();
    static Instruction dconst_0 = new DCONST_0();
    static Instruction dconst_1 = new DCONST_1();
    static Instruction iload_0 = new ILOAD_0();
    static Instruction iload_1 = new ILOAD_1();
    static Instruction iload_2 = new ILOAD_2();
    static Instruction iload_3 = new ILOAD_3();
    static Instruction lload_0 = new LLOAD_0();
    static Instruction lload_1 = new LLOAD_1();
    static Instruction lload_2 = new LLOAD_2();
    static Instruction lload_3 = new LLOAD_3();
    static Instruction fload_0 = new FLOAD_0();
    static Instruction fload_1 = new FLOAD_1();
    static Instruction fload_2 = new FLOAD_2();
    static Instruction fload_3 = new FLOAD_3();
    static Instruction dload_0 = new DLOAD_0();
    static Instruction dload_1 = new DLOAD_1();
    static Instruction dload_2 = new DLOAD_2();
    static Instruction dload_3 = new DLOAD_3();
    static Instruction aload_0 = new ALOAD_0();
    static Instruction aload_1 = new ALOAD_1();
    static Instruction aload_2 = new ALOAD_2();
    static Instruction aload_3 = new ALOAD_3();
    static Instruction istore_0 = new ISTORE_0();
    static Instruction istore_1 = new ISTORE_1();
    static Instruction istore_2 = new ISTORE_2();
    static Instruction istore_3 = new ISTORE_3();
    static Instruction lstore_0 = new LSTORE_0();
    static Instruction lstore_1 = new LSTORE_1();
    static Instruction lstore_2 = new LSTORE_2();
    static Instruction lstore_3 = new LSTORE_3();
    static Instruction fstore_0 = new FSTORE_0();
    static Instruction fstore_1 = new FSTORE_1();
    static Instruction fstore_2 = new FSTORE_2();
    static Instruction fstore_3 = new FSTORE_3();
    static Instruction dstore_0 = new DSTORE_0();
    static Instruction dstore_1 = new DSTORE_1();
    static Instruction dstore_2 = new DSTORE_2();
    static Instruction dstore_3 = new DSTORE_3();
    static Instruction astore_0 = new ASTORE_0();
    static Instruction astore_1 = new ASTORE_1();
    static Instruction astore_2 = new ASTORE_2();
    static Instruction astore_3 = new ASTORE_3();
    static Instruction pop = new POP();
    static Instruction pop2 = new POP2();
    static Instruction dup = new DUP();
    static Instruction dup_x1= new DUP_X1();
    static Instruction dup_x2 = new DUP_X2();
    static Instruction dup2 = new DUP2();
    static Instruction dup2_x1 = new DUP2_X1();
    static Instruction dup2_x2 = new DUP2_X2();
    static Instruction swap = new SWAP();
    static Instruction iadd = new IADD();
    static Instruction ladd = new LADD();
    static Instruction fadd = new FADD();
    static Instruction dadd = new DADD();
    static Instruction isub = new ISUB();
    static Instruction lsub = new LSUB();
    static Instruction fsub = new FSUB();
    static Instruction dsub = new DSUB();
    static Instruction imul = new IMUL();
    static Instruction lmul = new LMUL();
    static Instruction fmul = new FMUL();
    static Instruction dmul = new DMUL();
    static Instruction idiv = new IDIV();
    static Instruction ldiv = new LDIV();
    static Instruction fdiv = new FDIV();
    static Instruction ddiv = new DDIV();
    static Instruction irem = new IREM();
    static Instruction lrem = new LREM();
    static Instruction frem = new FREM();
    static Instruction drem = new DREM();
    static Instruction ineg = new INEG();
    static Instruction lneg = new LNEG();
    static Instruction fneg = new FNEG();
    static Instruction dneg = new DNEG();
    static Instruction ishl = new ISHL();
    static Instruction lshl = new LSHL();
    static Instruction ishr = new ISHR();
    static Instruction lshr = new LSHR();
    static Instruction iushr = new IUSHR();
    static Instruction lushr = new LUSHR();
    static Instruction iand = new IAND();
    static Instruction land = new LAND();
    static Instruction ior = new IOR();
    static Instruction lor = new LOR();
    static Instruction ixor = new IXOR();
    static Instruction lxor = new LXOR();
    static Instruction i2l = new I2L();
    static Instruction i2f = new I2F();
    static Instruction i2d = new I2D();
    static Instruction l2i = new L2I();
    static Instruction l2f = new L2F();
    static Instruction l2d = new L2D();
    static Instruction f2i = new F2I();
    static Instruction f2l = new F2L();
    static Instruction f2d = new F2D();
    static Instruction d2i = new D2I();
    static Instruction d2f = new D2F();
    static Instruction d2l = new D2L();
    static Instruction i2b = new I2B();
    static Instruction i2c = new I2C();
    static Instruction i2s = new I2S();
    static Instruction lcmp = new LCMP();
    static Instruction fcmpl = new FCMPL();
    static Instruction fcmpg = new FCMPG();
    static Instruction dcmpl = new DCMPL();
    static Instruction dcmpg = new DCMPG();

    public static Instruction newInstruction(int opcode) {
        switch (opcode) {
            case 0x00: return nop;
            case 0x01: return aconst_null;
            case 0x02: return iconst_m1;
            case 0x03: return iconst_0;
            case 0x04: return iconst_1;
            case 0x05: return iconst_2;
            case 0x06: return iconst_3;
            case 0x07: return iconst_4;
            case 0x08: return iconst_5;
            case 0x09: return lconst_0;
            case 0x0a: return lconst_1;
            case 0x0b: return fconst_0;
            case 0x0c: return fconst_1;
            case 0x0d: return fconst_2;
            case 0x0e: return dconst_0;
            case 0x0f: return dconst_1;
            case 0x10: return new BIPUSH();
            case 0x11: return new SIPUSH();
//            case 0x12: return null;
//            case 0x13: return null;
//            case 0x14: return null;
            case 0x15: return new ILOAD();
            case 0x16: return new LLOAD();
            case 0x17: return new FLOAD();
            case 0x18: return new DLOAD();
            case 0x19: return new ALOAD();
            case 0x1a: return iload_0;
            case 0x1b: return iload_1;
            case 0x1c: return iload_2;
            case 0x1d: return iload_3;
            case 0x1e: return lload_0;
            case 0x1f: return lload_1;
            case 0x20: return lload_2;
            case 0x21: return lload_3;
            case 0x22: return fload_0;
            case 0x23: return fload_1;
            case 0x24: return fload_2;
            case 0x25: return fload_3;
            case 0x26: return dload_0;
            case 0x27: return dload_1;
            case 0x28: return dload_2;
            case 0x29: return dload_3;
            case 0x2a: return aload_0;
            case 0x2b: return aload_1;
            case 0x2c: return aload_2;
            case 0x2d: return aload_3;
//            case 0x2e: return null;
//            case 0x2f: return null;
//            case 0x30: return null;
//            case 0x31: return null;
//            case 0x32: return null;
//            case 0x33: return null;
//            case 0x34: return null;
//            case 0x35: return null;
            case 0x36: return new ISTORE();
            case 0x37: return new LSTORE();
            case 0x38: return new FSTORE();
            case 0x39: return new DSTORE();
            case 0x3a: return new ASTORE();
            case 0x3b: return istore_0;
            case 0x3c: return istore_1;
            case 0x3d: return istore_2;
            case 0x3e: return istore_3;
            case 0x3f: return lstore_0;
            case 0x40: return lstore_1;
            case 0x41: return lstore_2;
            case 0x42: return lstore_3;
            case 0x43: return fstore_0;
            case 0x44: return fstore_1;
            case 0x45: return fstore_2;
            case 0x46: return fstore_3;
            case 0x47: return dstore_0;
            case 0x48: return dstore_1;
            case 0x49: return dstore_2;
            case 0x4a: return dstore_3;
            case 0x4b: return astore_0;
            case 0x4c: return astore_1;
            case 0x4d: return astore_2;
            case 0x4e: return astore_3;
//            case 0x4f: return null;
//            case 0x50: return null;
//            case 0x51: return null;
//            case 0x52: return null;
//            case 0x53: return null;
//            case 0x54: return null;
//            case 0x55: return null;
//            case 0x56: return null;
            case 0x57: return pop;
            case 0x58: return pop2;
            case 0x59: return dup;
            case 0x5a: return dup_x1;
            case 0x5b: return dup_x2;
            case 0x5c: return dup2;
            case 0x5d: return dup2_x1;
            case 0x5e: return dup2_x2;
            case 0x5f: return swap;
            case 0x60: return iadd;
            case 0x61: return ladd;
            case 0x62: return fadd;
            case 0x63: return dadd;
            case 0x64: return isub;
            case 0x65: return lsub;
            case 0x66: return fsub;
            case 0x67: return dsub;
            case 0x68: return imul;
            case 0x69: return lmul;
            case 0x6a: return fmul;
            case 0x6b: return dmul;
            case 0x6c: return idiv;
            case 0x6d: return ldiv;
            case 0x6e: return fdiv;
            case 0x6f: return ddiv;
            case 0x70: return irem;
            case 0x71: return lrem;
            case 0x72: return frem;
            case 0x73: return drem;
            case 0x74: return ineg;
            case 0x75: return lneg;
            case 0x76: return fneg;
            case 0x77: return dneg;
            case 0x78: return ishl;
            case 0x79: return lshl;
            case 0x7a: return ishr;
            case 0x7b: return lshr;
            case 0x7c: return iushr;
            case 0x7d: return lushr;
            case 0x7e: return iand;
            case 0x7f: return land;
            case 0x80: return ior;
            case 0x81: return lor;
            case 0x82: return ixor;
            case 0x83: return lxor;
            case 0x84: return new IINC();
            case 0x85: return i2l;
            case 0x86: return i2f;
            case 0x87: return i2d;
            case 0x88: return l2i;
            case 0x89: return l2f;
            case 0x8a: return l2d;
            case 0x8b: return f2i;
            case 0x8c: return f2l;
            case 0x8d: return f2d;
            case 0x8e: return d2i;
            case 0x8f: return d2l;
            case 0x90: return d2f;
            case 0x91: return i2b;
            case 0x92: return i2c;
            case 0x93: return i2s;
            case 0x94: return lcmp;
            case 0x95: return fcmpl;
            case 0x96: return fcmpg;
            case 0x97: return dcmpl;
            case 0x98: return dcmpg;
            case 0x99: return new IFEQ();
            case 0x9a: return new IFNE();
            case 0x9b: return new IFLT();
            case 0x9c: return new IFGE();
            case 0x9d: return new IFGT();
            case 0x9e: return new IFLE();
            case 0x9f: return new IF_ICMPEQ();
            case 0xa0: return new IF_ICMPNE();
            case 0xa1: return new IF_ICMPLT();
            case 0xa2: return new IF_ICMPGE();
            case 0xa3: return new IF_ICMPGT();
            case 0xa4: return new IF_ICMPLE();
            case 0xa5: return new IF_ACMPEQ();
            case 0xa6: return new IF_ACMPNE();
            case 0xa7: return new GOTO();
//            case 0xa8: return null;
//            case 0xa9: return null;
            case 0xaa: return new TABLE_SWITCH();
            case 0xab: return new LOOKUP_SWITCH();
//            case 0xac: return null;
//            case 0xad: return null;
//            case 0xae: return null;
//            case 0xaf: return null;
//            case 0xb0: return null;
//            case 0xb1: return null;
//            case 0xb2: return null;
//            case 0xb3: return null;
//            case 0xb4: return null;
//            case 0xb5: return null;
//            case 0xb6: return null;
//            case 0xb7: return null;
//            case 0xb8: return null;
//            case 0xb9: return null;
//            case 0xba: return null;
//            case 0xbb: return null;
//            case 0xbc: return null;
//            case 0xbd: return null;
//            case 0xbe: return null;
//            case 0xbf: return null;
//            case 0xc0: return null;
//            case 0xc1: return null;
//            case 0xc2: return null;
//            case 0xc3: return null;
            case 0xc4: return new WIDE();
//            case 0xc5: return null;
            case 0xc6: return new IFNULL();
            case 0xc7: return new IFNONNULL();
            case 0xc8: return new GOTO_W();
//            case 0xc9: return null;
//            case 0xca: return null;
//            case 0xfe: return null;
//            case 0xff: return null;
            default: throw new RuntimeException(String.format("Unsupported opcode: 0x%x", opcode));
        }
    }
}
